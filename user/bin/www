#!/usr/bin/env node

/** Module dependencies. */
var app = require('../app');
var debug = require('debug')('uccportal:server');
var http = require('http');
var mongoose = require('mongoose');

/** Get port from environment and store in Express. */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/** Create HTTP server. */
var server = http.createServer(app);

/** Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onHTTPError);
server.on('listening', onHTTPListening);

/** Connect to mongodb */
mongoose.connect('mongodb://localhost/uccportal-dev'); 
var db = mongoose.connection;
db.on('error', function (err) {
  console.warn(err);
  console.warn("Error connecting to DB!");
  process.exit(1);
});
db.once('open', function() {
  console.log("Connected to db");
});

/** Normalize a port into a number, string, or false. */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/** Event listener for HTTP server "error" event. */
function onHTTPError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/** Event listener for HTTP server "listening" event. */
function onHTTPListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
